/* Copyright (C) 2013-2021 TU Dortmund
 * This file is part of AutomataLib, http://www.automatalib.net/.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
	LOOKAHEAD = 1;
	STATIC = false;
	SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(InternalLTSminLTLParser)

package net.automatalib.modelcheckers.ltsmin;

class InternalLTSminLTLParser {}

PARSER_END(InternalLTSminLTLParser)

SKIP :
{
	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN [IGNORE_CASE]:
{
	< TRUE: "true" >
|	< FALSE: "false" >
}

TOKEN:
{
	< BEGIN_LABEL: "\"" > : IN_LABEL
}
<IN_LABEL> TOKEN:
{
	< LABEL: ("\\\"" | ~["\""])+ >
|	< END_LABEL: "\"" > : DEFAULT
}

TOKEN:
{
// atoms
	< LETTER_LABEL: "letter" >
|	< IO_LABEL: "input" | "output" >
|	< ASSIGNMENT: "==" >
|	< LBRACKET: "(" >
|	< RBRACKET: ")" >
// junctors
|	< NEGATION: "!" >
|	< ALWAYS: "[]" >
|	< EVENTUALLY: "<>" >
|	< NEXT: "X" >
|	< AND: "&&" >
|	< OR: "||" >
|	< EQUIVALENCE: "<->" >
|	< IMPLICATION: "->" >
|	< UNTIL: "U" >
|	< RELEASE: "R" >
}

private void empty():
{}
{
	{}
}

private void letterAssignment():
{}
{
	<LETTER_LABEL> <ASSIGNMENT> <BEGIN_LABEL> (<LABEL>)? <END_LABEL>
}

private void letterAtom():
{}
{
	<TRUE> | <FALSE> | letterAssignment()
}

void letterFormula():
{}
{
	letterAtom() letterFormulaHelper() |
	<LBRACKET> letterFormula() <RBRACKET> letterFormulaHelper() |
	<NEGATION> letterFormula() letterFormulaHelper()|
	<ALWAYS> letterFormula() letterFormulaHelper()|
	<EVENTUALLY> letterFormula() letterFormulaHelper()|
	<NEXT> letterFormula() letterFormulaHelper()
}

/**
 * Helper-function to prevent left recursion.
 */
private void letterFormulaHelper():
{}
{
	<AND> letterFormula() letterFormulaHelper() |
	<OR> letterFormula() letterFormulaHelper() |
	<IMPLICATION> letterFormula() letterFormulaHelper() |
	<EQUIVALENCE> letterFormula() letterFormulaHelper() |
	<UNTIL> letterFormula() letterFormulaHelper() |
	<RELEASE> letterFormula() letterFormulaHelper() |
	empty()
}


private void ioAssignment():
{}
{
	<IO_LABEL> <ASSIGNMENT> <BEGIN_LABEL> (<LABEL>)? <END_LABEL>
}

private void ioAtom():
{}
{
	<TRUE> | <FALSE> | ioAssignment()
}

void ioFormula():
{}
{
	ioAtom() ioFormulaHelper() |
	<LBRACKET> ioFormula() <RBRACKET> ioFormulaHelper() |
	<NEGATION> ioFormula() ioFormulaHelper()|
	<ALWAYS> ioFormula() ioFormulaHelper()|
	<EVENTUALLY> ioFormula() ioFormulaHelper()|
	<NEXT> ioFormula() ioFormulaHelper()
}

/**
 * Helper-function to prevent left recursion.
 */
private void ioFormulaHelper():
{}
{
	<AND> ioFormula() ioFormulaHelper() |
	<OR> ioFormula() ioFormulaHelper() |
	<IMPLICATION> ioFormula() ioFormulaHelper() |
	<EQUIVALENCE> ioFormula() ioFormulaHelper() |
	<UNTIL> ioFormula() ioFormulaHelper() |
	<RELEASE> ioFormula() ioFormulaHelper() |
	empty()
}
