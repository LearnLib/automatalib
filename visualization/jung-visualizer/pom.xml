<?xml version="1.0" encoding="UTF-8" ?>
<!--
Copyright (C) 2013-2024 TU Dortmund University
This file is part of AutomataLib, http://www.automatalib.net/.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>net.automatalib</groupId>
        <artifactId>automata-visualization-parent</artifactId>
        <version>0.12.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>automata-jung-visualizer</artifactId>
    <packaging>jar</packaging>

    <name>AutomataLib :: Visualization :: JUNG Visualizer</name>
    <description>
        This artifact provides a visualization implementation based on the JUNG (https://jung.sourceforge.net/) library.
    </description>

    <dependencies>
        <!-- internal -->
        <dependency>
            <groupId>net.automatalib</groupId>
            <artifactId>automata-api</artifactId>
        </dependency>
        <dependency>
            <groupId>net.automatalib</groupId>
            <artifactId>automata-commons-util</artifactId>
        </dependency>

        <!-- external -->
        <dependency>
            <groupId>com.github.misberner.graphviz-awt-shapes</groupId>
            <artifactId>graphviz-awt-shapes</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.jung</groupId>
            <artifactId>jung-algorithms</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.jung</groupId>
            <artifactId>jung-api</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.jung</groupId>
            <artifactId>jung-graph-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.jung</groupId>
            <artifactId>jung-visualization</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <!-- build -->
        <dependency>
            <groupId>org.checkerframework</groupId>
            <artifactId>checker-qual</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kohsuke.metainf-services</groupId>
            <artifactId>metainf-services</artifactId>
        </dependency>

        <!-- test -->
        <dependency>
            <groupId>com.github.caciocavallosilano</groupId>
            <artifactId>cacio-tta</artifactId>
        </dependency>
        <dependency>
            <groupId>net.automatalib</groupId>
            <artifactId>automata-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.automatalib</groupId>
            <artifactId>automata-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- set properties so we can easily resolve the file path to the jung-graph-impl jar during compilation -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Patch jung-api JAR because it contains a split package with the jung-graph-impl JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <configuration>
                            <fork>true</fork>
                            <compilerArgument>--patch-module=jung.api=${net.sf.jung:jung-graph-impl:jar}</compilerArgument>
                        </configuration>
                    </execution>
                    <execution>
                        <id>module-compile</id>
                        <configuration>
                            <fork>true</fork>
                            <compilerArgument>--patch-module=jung.api=${net.sf.jung:jung-graph-impl:jar}</compilerArgument>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <configuration>
                            <!-- core is only a testing dependency not defined in module-info.java -->
                            <!-- append to existing argLine to nicely work together with jacoco plugin -->
                            <argLine>@{argLine} --patch-module=jung.api=${net.sf.jung:jung-graph-impl:jar}</argLine>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- TODO: Currently the java compiler does not support exploded JARs with an Automatic-Module-Name.
            Therefore, we use a module-info.java to make the compiler happy and be able to provide a module description
            (e.g., during 'mvn site'). However, we do not want to include the compiled module-info because this artifact
            has non-modular dependencies. If people want to use this artifact in a modular context (e.g., with jlink)
            they need to setup the dependencies themselves -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Automatic-Module-Name>net.automatalib.visualization.jung</Automatic-Module-Name>
                        </manifestEntries>
                    </archive>
                    <excludes>
                        <exclude>module-info.class</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
